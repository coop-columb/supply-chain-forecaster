version: '3.8'

# Define reusable configurations
x-common-variables: &common-variables
  LOG_LEVEL: ${LOG_LEVEL:-INFO}

x-common-prod-variables: &common-prod-variables
  <<: *common-variables
  ENV: production
  
x-common-dev-variables: &common-dev-variables
  <<: *common-variables
  ENV: development

services:
  # Development services
  api:
    build:
      context: .
      target: development
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - .:/app
      - model_data:/app/data/models
    env_file:
      - .env
    environment:
      <<: *common-dev-variables
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  dashboard:
    build:
      context: .
      target: development
    ports:
      - "${DASHBOARD_PORT:-8050}:8050"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      <<: *common-dev-variables
      API_URL: ${API_URL:-http://api:8000}
    command: python -m dashboard.app
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  tests:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    command: pytest tests/ --cov=./ --cov-report=xml
    depends_on:
      - api
      - dashboard

  # Production services
  api-prod:
    build:
      context: .
      target: api-production
    ports:
      - "${API_PORT:-8000}:8000"
      - "${API_METRICS_PORT:-9090}:9090"
    volumes:
      - model_data:/app/data/models
      - logs:/app/logs
    env_file:
      - .env.prod
    environment:
      <<: *common-prod-variables
      PROMETHEUS_METRICS: "true"
      COLLECT_API_METRICS: "true"
      COLLECT_PREDICTION_METRICS: "true"
      METRICS_PORT: "9090"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  dashboard-prod:
    build:
      context: .
      target: dashboard-production
    ports:
      - "${DASHBOARD_PORT:-8050}:8050"
    volumes:
      - logs:/app/logs
    env_file:
      - .env.prod
    environment:
      <<: *common-prod-variables
      API_URL: ${API_URL:-http://api-prod:8000}
      COLLECT_API_METRICS: "true"
      LOG_JSON_FORMAT: "true"
    depends_on:
      - api-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
      
  # Monitoring stack for production
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
    depends_on:
      - api-prod
      - dashboard-prod
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:10.0.0
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  model_data:
    driver: local
  logs:
    driver: local